// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_grpcHandlers is a generated GoMock package.
package mock_grpcHandlers

import (
	context "context"
	"github.com/go-telegram-bot-api/telegram-bot-api/api/apiPb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPlayersServiceClient is a mock of PlayersServiceClient interface.
type MockPlayersServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlayersServiceClientMockRecorder
}

// MockPlayersServiceClientMockRecorder is the mock recorder for MockPlayersServiceClient.
type MockPlayersServiceClientMockRecorder struct {
	mock *MockPlayersServiceClient
}

// NewMockPlayersServiceClient creates a new mock instance.
func NewMockPlayersServiceClient(ctrl *gomock.Controller) *MockPlayersServiceClient {
	mock := &MockPlayersServiceClient{ctrl: ctrl}
	mock.recorder = &MockPlayersServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayersServiceClient) EXPECT() *MockPlayersServiceClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPlayersServiceClient) Add(ctx context.Context, in *apiPb.AddRequest, opts ...grpc.CallOption) (*apiPb.AddResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*apiPb.AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPlayersServiceClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPlayersServiceClient)(nil).Add), varargs...)
}

// Delete mocks base method.
func (m *MockPlayersServiceClient) Delete(ctx context.Context, in *apiPb.DeleteRequest, opts ...grpc.CallOption) (*apiPb.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*apiPb.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPlayersServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlayersServiceClient)(nil).Delete), varargs...)
}

// List mocks base method.
func (m *MockPlayersServiceClient) List(ctx context.Context, in *apiPb.ListRequest, opts ...grpc.CallOption) (*apiPb.ListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*apiPb.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPlayersServiceClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlayersServiceClient)(nil).List), varargs...)
}

// Update mocks base method.
func (m *MockPlayersServiceClient) Update(ctx context.Context, in *apiPb.UpdateRequest, opts ...grpc.CallOption) (*apiPb.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*apiPb.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPlayersServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlayersServiceClient)(nil).Update), varargs...)
}
